{ config, lib, pkgs, callPackage, ... }:
let
tex = (pkgs.texlive.combine {
inherit (pkgs.texlive) scheme-medium
dvisvgm dvipng # for preview and export as html
wrapfig amsmath ulem hyperref capt-of;
#(setq org-latex-compiler "lualatex")
#(setq org-preview-latex-default-process 'dvisvgm)
});
in
{
programs.emacs = {
enable = true;
package = (pkgs.emacsWithPackagesFromUsePackage {
# Your Emacs config file.
config = ./init.el;
# Whether to include your config as a default init file.
# If being bool, the value of config is used.
# Its value can also be a derivation like this if you want to do some
# substitution:
# defaultInitFile = pkgs.substituteAll {
# name = "default.el";
# src = ./emacs.el;
# inherit (config.xdg) configHome dataHome;
# };
defaultInitFile = true;

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
    # Package is optional, defaults to pkgs.emacs
    package = pkgs.emacs29;

    # By default emacsWithPackagesFromUsePackage will only pull in
    # packages with `:ensure`, `:ensure t` or `:ensure <package name>`.
    # Setting `alwaysEnsure` to `true` emulates `use-package-always-ensure`
    # and pulls in all use-package references not explicitly disabled via
    # `:ensure nil` or `:disabled`.
    # Note that this is NOT recommended unless you've actually set
    # `use-package-always-ensure` to `t` in your config.
    # alwaysEnsure = true;


    # Optionally provide extra packages not in the configuration file.
    extraEmacsPackages = epkgs: (with epkgs; [
      direnv
      all-the-icons
      ef-themes
      ox-pandoc
      request
      flycheck-clojure
      lsp-latex
      nov
      skewer-mode
    ]);

  });
};

home.packages = (with pkgs; [
# direnv
devenv
iosevka-comfy.comfy
source-code-pro
fd
ffmpegthumbnailer
imagemagick
mediainfo
poppler
unzip
pandoc
plantuml
tex
babashka
cask
clj-kondo
clojure
clojure-lsp
# gitlab-runner
neil
nodePackages.graphql-language-service-cli
nixfmt
python3
ripgrep
sqls
temurin-bin
yaml-language-server
docker
docker-buildx
docker-compose

]);

home.file.".config/emacs/init.el" = {
source = ./init.el;
};

home.file.".config/emacs/snippets" = {
source = ./snippets;
recursive = true;
};

home.file.".config/emacs/elisp" = {
source = ./elisp;
recursive = true;
};

home.file.".config/emacs/sounds" = {
source = ./sounds;
recursive = true;
};

home.file.".local/lib/plantuml.jar" = {
source = ./plantuml-1.2024.7.jar;
};
}
